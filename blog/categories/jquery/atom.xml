<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jquery | Jerad Bitner]]></title>
  <link href="http://sirkitree.github.com/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://sirkitree.github.com/"/>
  <updated>2012-01-30T09:46:33-07:00</updated>
  <id>http://sirkitree.github.com/</id>
  <author>
    <name><![CDATA[Jerad Bitner]]></name>
    <email><![CDATA[jbitner@jeradbitner.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery checkbox goodness]]></title>
    <link href="http://sirkitree.github.com/content/jquery-checkbox-goodness"/>
    <updated>2007-06-06T00:00:00-06:00</updated>
    <id>http://sirkitree.github.com/content/jquery-checkbox-goodness</id>
    <content type="html"><![CDATA[<p>I was working on a select all feature today and just wanted to share this with the world. (a.k.a. keep it for later)</p>

<pre>
$(document).ready( function() {
  $('a#select_all').click( function() {
    $('input:checkbox').each( function() {
      this.checked = !this.checked;
    });
    return false;
  });
});
</pre>


<p>The first item to note is that jQuery created pseudo classes for input.</p>

<pre>
$('input:checkbox');
...
$('input:textbox');
... etc.
</pre>


<p>The second item to note, which I thought was ingenious, was setting the value of the checkbox to the inverse of it's current value.</p>

<pre>
this.checked = !this.checked;
</pre>


<p>Works great and it's short and sweet. Who loves jQuery?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery: working with select options]]></title>
    <link href="http://sirkitree.github.com/content/jquery-working-select-options"/>
    <updated>2007-02-27T00:00:00-07:00</updated>
    <id>http://sirkitree.github.com/content/jquery-working-with-select-options</id>
    <content type="html"><![CDATA[<p>Following my <a href="http://sirkitree.github.com/rolechanger/">recent post</a> on my <a href="http://drupal.org/project/rolechanger/">rolechanger module</a>, I started delving into how to provide functionality with the resulting dropdown box that the module provides. I wanted to provide all functionality through javascript and have included a rolechanger.js file for this purpose. However I found a few quirks while working with jQuery and the select element.</p>

<p>I started out with a .change() on the select element and drilled down through the .children() looking for [@selected]. However, thought this worked fine in IE, Firefox did not pick this up at all. I saw in the jQuery issues that this had been fixed, but evidently not for the release that ships with Drupal. Here's the resulting code for the IE portion:</p>

<pre>
    // ie doesn't pick up the option.click, so we'll have to use the select.change
    $('#edit-role-changer').change(function(){

    // get rid of select box
    $('#edit-role-changer').hide();

        // show the chosen role as static text
       // NOTE: FF doesn't pick up [@selected]
      $('#role').html($(this).children("[@selected]").text()).show();

      // provide a change link
      $('#role-change-back').show();

    });
</pre>


<p>Firefox was actually a little easier to code for, since I found that it would pick up a .click() on the option element. So the resulting code for Firefox is this:</p>

<pre>
    // provide action for an option change
    $('#edit-role-changer option').click(function(){

      // get rid of select box
      $('#edit-role-changer').hide();

      // show the chosen role as static text
      $('#role').html($(this).text()).show();

      // provide a change link
      $('#role-change-back').show();

    });
</pre>


<p>Since Firefox does pick up the .change() function that is on the select element that is used for IE, I then had to do a browsers detection, which jQuery makes simple as pie with $.browser. Here is the resulting full code:</p>

<pre>
  // see which browser we're working with
  if ($.browser.msie) {

    // ie doesn't pick up the option.click, so we'll have to use the select.change
    $('#edit-role-changer').change(function(){

      // get rid of select box
      $('#edit-role-changer').hide();

      // show the chosen role as static text
      // NOTE: FF doesn't pick up [@selected]
      $('#role').html($(this).children("[@selected]").text()).show();

      // provide a change link
      $('#role-change-back').show();

    });
  }
  else {

    // provide action for an option change
    $('#edit-role-changer option').click(function(){

      // get rid of select box
      $('#edit-role-changer').hide();

      // show the chosen role as static text
      $('#role').html($(this).text()).show();

      // provide a change link
      $('#role-change-back').show();

    });
  }
</pre>


<p>Happy jQuerying!</p>
]]></content>
  </entry>
  
</feed>
