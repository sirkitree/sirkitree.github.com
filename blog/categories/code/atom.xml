<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Jerad Bitner]]></title>
  <link href="http://sirkitree.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://sirkitree.github.com/"/>
  <updated>2012-01-29T16:31:23-07:00</updated>
  <id>http://sirkitree.github.com/</id>
  <author>
    <name><![CDATA[Jerad Bitner]]></name>
    <email><![CDATA[jbitner@jeradbitner.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Node.js to convert Drupal to Jekkyl]]></title>
    <link href="http://sirkitree.github.com/blog/2012/01/29/using-node-dot-js-to-convert-drupal-to-jekkyl/"/>
    <updated>2012-01-29T15:54:00-07:00</updated>
    <id>http://sirkitree.github.com/blog/2012/01/29/using-node-dot-js-to-convert-drupal-to-jekkyl</id>
    <content type="html"><![CDATA[<p>I've gone and revamped my blog again.</p>

<p>The current new hotness has been <a href="https://github.com/mojombo/jekyll/wiki">Jekkyl</a> of late, ever since GitHub came out with it's <a href="http://pages.github.com/">Pages</a> feature. My first awareness of it was around September 2011 when <a href="http://developmentseed.org/">DevelopmentSeed</a> converted their .org page to Jekkly and <a href="http://developmentseed.org/blog/2011/09/09/jekyll-github-pages/">wrote about it</a>. I started playing with it almost immediately when I had downtime during <a href="http://www.lullabot.com">Lullabot</a>'s <a href="http://2011.doitwithdrupal.com">Do it with Drupal</a> conference. Sacreligious? Whatever, it was something new to learn.</p>

<p>Then quite recently <a href="http://walkah.net/blog/new-year-new-blog/">Walkah.net</a> moved to Jekkyl and renewed my interest when he released the <a href="https://github.com/walkah/walkah.net/blob/master/_import/drupal.rb">Ruby script</a> he used to convert his simple Drupal blog into YAML for use with Jekkly. That looked interesting so I put it in my backlog.</p>

<p>Shortly after, I started getting some <a href="https://twitter.com/#!/mikl/status/159634667702722562">flak</a> from <a href="https://twitter.com/#!/mikl">@mikl</a> for not paying attention to my Drupal.org issue queue for the <a href="http://drupal.org/project/flag_friend">Flag Friend</a> module and as I interacted with and him, found that he was using <a href="http://octopress.org/">Octopress</a> for <a href="http://mikkel.hoegh.org/">his personal blog</a>. Octopress is a quick way to get started using Jekkly, and I like quick.</p>

<p>So I put these two sources of inspiration together and it gave me reason to revisit Walkah's Ruby script. After a few hours of trying to get the MySQL Ruby Gem working with the version of MySQL I have that comes with MAMP, I gave up and decided to just <a href="https://github.com/sirkitree/sirkitree.github.com/blob/master/_import/drupal.js">rewrite the script into Node.js</a>, which I've been trying to learn more about lately.</p>

<p>The end result is all of my posts from JeradBitner.com converted into YAML format for use with the Octopress system which uses Jekkyl to generate your pages and can be convieniently hooked up to GitHub Pages in order to quickly create content with a few simple commands. (Whew! Try saying that to your wife without sounding bat-shit crazy!)</p>

<pre><code>$&gt; rake new_post['Title of your post']
</code></pre>

<p>  Then write your post of course.</p>

<pre><code>$&gt; rake generate
</code></pre>

<p>  Which runs Jekkly and converts all of your YAML to HTML and puts the files in the correct place.</p>

<pre><code>$&gt; rake preview
</code></pre>

<p>  This starts up a local server so you can see your new post at localhost:4000.</p>

<pre><code>$&gt; rake deploy
</code></pre>

<p>  Which commits the generated files to your GitHub repository and pushes them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resurrection]]></title>
    <link href="http://sirkitree.github.com/content/resurrection"/>
    <updated>2009-11-12T00:00:00-07:00</updated>
    <id>http://sirkitree.github.com/content/resurrection</id>
    <content type="html"><![CDATA[<p>Finally took the old personal blog from d5 to d6 and gave it a face lift. The new Acquia Slate theme is pretty slick, but I wanted to give it just a small bit of uniqueness, so I wrote a little custom function into the theme in order to pull up random photos from one of my Flickr sets. It was fast and fun, made easy with the Flickr module's API. Here's a couple quick steps I took:</p>

<!--break-->


<ol>
<li>Edited the page-front.tpl.php and inserted a little logic to give the #preface-wrapper a different background-image property.
<pre>
<div id="preface-wrapper" class="clearfix" <?php if ($flickr): ?>style="background-image: url(<?php print $flickr; ?>);"<?php endif; ?>>
</pre></li>
<li>Wrote a custom function based off of the flickr_block.module's flickr_block_photoset_random() function. The function returns just the flickr farm url instead of running through the theme functions.
<pre>
function acquia_slate_flickr_block_photoset_random($nsid, $show_n, $size, $photoset_id) {
  // Get information about the photoset, including the owner.
  $info = flickr_photoset_get_info($photoset_id);
  if (!$info) {
    return;
  }

  // Get a list of "all" the photos in the photoset. This is cached.
  $response = flickr_request('flickr.photosets.getPhotos',
    array(
      'photoset_id' => $photoset_id,
      'per_page' => 500, // get as many images as possible
      'extras' => 'owner',
    )
  );
  if (!$response) {
    return;
  }

  // Randomly display $show_n of them
  $photos = $response['photoset']['photo'];
  shuffle($photos);

  $output = flickr_photo_img($photos[0], $size);

  return $output;
}
</pre></li>
<li>Set the result of this new function, called with hardcoded arguments, to a theme variable within template.php's phptemplate_preprocess_page() function.
<pre>
  // get a flickr image for the front page background
  $vars['flickr'] = acquia_slate_flickr_block_photoset_random($nsid, $show_n, $size, $photoset_id);
</pre>
</li>
</ol>


<p>The one thing I couldn't find was a block setting when looking at the flickr_block.module for the large size picture, which I needed.  But looking at how the url is created within flickr.inc's flickr_photo_img() function and comparing it with an actual large image on Flickr.com, I quickly saw that the size string is simply 'b_d' for large.</p>

<p>Fun stuff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery checkbox goodness]]></title>
    <link href="http://sirkitree.github.com/content/jquery-checkbox-goodness"/>
    <updated>2007-06-06T00:00:00-06:00</updated>
    <id>http://sirkitree.github.com/content/jquery-checkbox-goodness</id>
    <content type="html"><![CDATA[<p>I was working on a select all feature today and just wanted to share this with the world. (a.k.a. keep it for later)</p>

<pre>
$(document).ready( function() {
  $('a#select_all').click( function() {
    $('input:checkbox').each( function() {
      this.checked = !this.checked;
    });
    return false;
  });
});
</pre>


<p>The first item to note is that jQuery created pseudo classes for input.</p>

<pre>
$('input:checkbox');
...
$('input:textbox');
... etc.
</pre>


<p>The second item to note, which I thought was ingenious, was setting the value of the checkbox to the inverse of it's current value.</p>

<pre>
this.checked = !this.checked;
</pre>


<p>Works great and it's short and sweet. Who loves jQuery?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery: working with select options]]></title>
    <link href="http://sirkitree.github.com/content/jquery-working-select-options"/>
    <updated>2007-02-27T00:00:00-07:00</updated>
    <id>http://sirkitree.github.com/content/jquery-working-with-select-options</id>
    <content type="html"><![CDATA[<p>Following my <a href="http://sirkitree.github.com/rolechanger/">recent post</a> on my <a href="http://drupal.org/project/rolechanger/">rolechanger module</a>, I started delving into how to provide functionality with the resulting dropdown box that the module provides. I wanted to provide all functionality through javascript and have included a rolechanger.js file for this purpose. However I found a few quirks while working with jQuery and the select element.</p>

<p>I started out with a .change() on the select element and drilled down through the .children() looking for [@selected]. However, thought this worked fine in IE, Firefox did not pick this up at all. I saw in the jQuery issues that this had been fixed, but evidently not for the release that ships with Drupal. Here's the resulting code for the IE portion:</p>

<pre>
    // ie doesn't pick up the option.click, so we'll have to use the select.change
    $('#edit-role-changer').change(function(){

    // get rid of select box
    $('#edit-role-changer').hide();

        // show the chosen role as static text
       // NOTE: FF doesn't pick up [@selected]
      $('#role').html($(this).children("[@selected]").text()).show();

      // provide a change link
      $('#role-change-back').show();

    });
</pre>


<p>Firefox was actually a little easier to code for, since I found that it would pick up a .click() on the option element. So the resulting code for Firefox is this:</p>

<pre>
    // provide action for an option change
    $('#edit-role-changer option').click(function(){

      // get rid of select box
      $('#edit-role-changer').hide();

      // show the chosen role as static text
      $('#role').html($(this).text()).show();

      // provide a change link
      $('#role-change-back').show();

    });
</pre>


<p>Since Firefox does pick up the .change() function that is on the select element that is used for IE, I then had to do a browsers detection, which jQuery makes simple as pie with $.browser. Here is the resulting full code:</p>

<pre>
  // see which browser we're working with
  if ($.browser.msie) {

    // ie doesn't pick up the option.click, so we'll have to use the select.change
    $('#edit-role-changer').change(function(){

      // get rid of select box
      $('#edit-role-changer').hide();

      // show the chosen role as static text
      // NOTE: FF doesn't pick up [@selected]
      $('#role').html($(this).children("[@selected]").text()).show();

      // provide a change link
      $('#role-change-back').show();

    });
  }
  else {

    // provide action for an option change
    $('#edit-role-changer option').click(function(){

      // get rid of select box
      $('#edit-role-changer').hide();

      // show the chosen role as static text
      $('#role').html($(this).text()).show();

      // provide a change link
      $('#role-change-back').show();

    });
  }
</pre>


<p>Happy jQuerying!</p>
]]></content>
  </entry>
  
</feed>
