<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Jerad Bitner]]></title>
  <link href="http://sirkitree.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://sirkitree.github.com/"/>
  <updated>2012-02-05T14:25:20-07:00</updated>
  <id>http://sirkitree.github.com/</id>
  <author>
    <name><![CDATA[Jerad Bitner]]></name>
    <email><![CDATA[jbitner@jeradbitner.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[todo list in node.js and geektool]]></title>
    <link href="http://sirkitree.github.com/blog/2012/02/05/todo-list-in-node-dot-js-and-geektool/"/>
    <updated>2012-02-05T13:59:00-07:00</updated>
    <id>http://sirkitree.github.com/blog/2012/02/05/todo-list-in-node-dot-js-and-geektool</id>
    <content type="html"><![CDATA[<p>I've long had a quick shell script that was a simple todo list based on Jerod Santo's <a href="http://blog.jerodsanto.net/2010/12/minimally-awesome-todos/">Minimally Awesome Todos</a>. It's very minimal, and quite awesome indeed. Even more than loving how minimal it is, I really liked displaying my todos on my desktop through <a href="http://projects.tynsoe.org/en/geektool/">GeekTool</a>.</p>

<p>Then I stumbled onto a <a href="https://github.com/vesln/todo">Node.js version</a> of a todo list and thought I'd give it a shot. I got it setup, but when I wanted to try to display the output through GeekTool, I failed. So I delved into todo list code a bit more and learned quite a lot!</p>

<p>My <a href="https://github.com/vesln/todo/pull/3">first attempt</a> was to simply write the output of the <code>todo ls</code> command to a file. I got an immediate response from the maintainer, <a href="https://github.com/vesln">Veselin Todorov</a> and was encouraged to change the command from <code>write</code> to <code>export</code> and write up a test for the new command as well.</p>

<p>I succeeded in <a href="https://github.com/vesln/todo/pull/4">converting the <code>write</code> command to <code>export</code></a>, and fixed up a small bug with the path of the file I was writing to by default, but thus far have completely failed at writing a test to confirm that the file was written.</p>

<p>The project is currently using <a href="http://sinonjs.org/">Sinon.JS</a> for testing, and even though the API seems pretty robust, and the examples coherent, I'm simply failing at figuring out how to test file creation with it. So far all I have is a stub:</p>

<p><div><script src='https://gist.github.com/1747985.js?file='></script>
<noscript><pre><code>  describe('.export()', function(done) {
    it('should write todos to a file', function(done) {

    });
  });</code></pre></noscript></div>
</p>

<p>However, it is working well without a test at this point, and I have a pretty todo list on my desktop! :)</p>

<p><img src="https://img.skitch.com/20120205-q32piq2918kutm1autmh6yby4m.png" alt="GeekTool Todos" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New blog command and some style updates]]></title>
    <link href="http://sirkitree.github.com/blog/2012/02/05/new-blog-command-and-some-style-updates/"/>
    <updated>2012-02-05T13:39:00-07:00</updated>
    <id>http://sirkitree.github.com/blog/2012/02/05/new-blog-command-and-some-style-updates</id>
    <content type="html"><![CDATA[<p>I love Github. The more I use it, the more I love it. As a form of endearment, I've updated the style of this blog to look a little more like Github than default Octopress. Simple, clean, fun.</p>

<p>I've also been looking for a quicker way to blog on a whim, and having to switch into my octopress directory, and then type <code>new_post["title of my post"]</code> was still just two steps too much. So I pulled up my <code>.bash_profile</code> and started scripting. Here's what I came up with:</p>

<p><div><script src='https://gist.github.com/1747860.js?file='></script>
<noscript><pre><code>###########
## Blogging
function new_post {
  cd /Users/sirkitree/github/octopress
  rake new_post[&quot;$1&quot;]
}
alias blog=&quot;new_post&quot;</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 Photobooth]]></title>
    <link href="http://sirkitree.github.com/blog/2012/01/30/html5-photoboot/"/>
    <updated>2012-01-30T09:36:00-07:00</updated>
    <id>http://sirkitree.github.com/blog/2012/01/30/html5-photoboot</id>
    <content type="html"><![CDATA[<p>After reading an <a href="http://arstechnica.com/business/news/2012/01/hands-on-building-an-html5-photo-booth-with-chromes-new-webcam-api.ars">article</a> about the experimental support for WebRTC getting put into the latest version of browsers, my buddy <a href="https://plus.google.com/102577299588201077107/about">David Burns</a> was inspired to write a quick app called <a href="http://html5photobooth.com/">HTML5 Photobooth</a>.</p>

<p>Code can be found here: https://github.com/davexoxide/HTML5-Photobooth</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Node.js to convert Drupal to Jekkyl]]></title>
    <link href="http://sirkitree.github.com/blog/2012/01/29/using-node-dot-js-to-convert-drupal-to-jekkyl/"/>
    <updated>2012-01-29T15:54:00-07:00</updated>
    <id>http://sirkitree.github.com/blog/2012/01/29/using-node-dot-js-to-convert-drupal-to-jekkyl</id>
    <content type="html"><![CDATA[<p>I've gone and revamped my blog again.</p>

<p>The current new hotness has been <a href="https://github.com/mojombo/jekyll/wiki">Jekkyl</a> of late, ever since GitHub came out with it's <a href="http://pages.github.com/">Pages</a> feature. My first awareness of it was around September 2011 when <a href="http://developmentseed.org/">DevelopmentSeed</a> converted their .org page to Jekkly and <a href="http://developmentseed.org/blog/2011/09/09/jekyll-github-pages/">wrote about it</a>. I started playing with it almost immediately when I had downtime during <a href="http://www.lullabot.com">Lullabot</a>'s <a href="http://2011.doitwithdrupal.com">Do it with Drupal</a> conference. Sacreligious? Whatever, it was something new to learn.</p>

<p>Then quite recently <a href="http://walkah.net/blog/new-year-new-blog/">Walkah.net</a> moved to Jekkyl and renewed my interest when he released the <a href="https://github.com/walkah/walkah.net/blob/master/_import/drupal.rb">Ruby script</a> he used to convert his simple Drupal blog into YAML for use with Jekkly. That looked interesting so I put it in my backlog.</p>

<p>Shortly after, I started getting some <a href="https://twitter.com/#!/mikl/status/159634667702722562">flak</a> from <a href="https://twitter.com/#!/mikl">@mikl</a> for not paying attention to my Drupal.org issue queue for the <a href="http://drupal.org/project/flag_friend">Flag Friend</a> module and as I interacted with and him, found that he was using <a href="http://octopress.org/">Octopress</a> for <a href="http://mikkel.hoegh.org/">his personal blog</a>. Octopress is a quick way to get started using Jekkly, and I like quick.</p>

<p>So I put these two sources of inspiration together and it gave me reason to revisit Walkah's Ruby script. After a few hours of trying to get the MySQL Ruby Gem working with the version of MySQL I have that comes with MAMP, I gave up and decided to just <a href="https://github.com/sirkitree/sirkitree.github.com/blob/master/_import/drupal.js">rewrite the script into Node.js</a>, which I've been trying to learn more about lately.</p>

<p>The end result is all of my posts from JeradBitner.com converted into YAML format for use with the Octopress system which uses Jekkyl to generate your pages and can be convieniently hooked up to GitHub Pages in order to quickly create content with a few simple commands. (Whew! Try saying that to your wife without sounding bat-shit crazy!)</p>

<pre><code>$&gt; rake new_post['Title of your post']
</code></pre>

<p>  Then write your post of course.</p>

<pre><code>$&gt; rake generate
</code></pre>

<p>  Which runs Jekkly and converts all of your YAML to HTML and puts the files in the correct place.</p>

<pre><code>$&gt; rake preview
</code></pre>

<p>  This starts up a local server so you can see your new post at localhost:4000.</p>

<pre><code>$&gt; rake deploy
</code></pre>

<p>  Which commits the generated files to your GitHub repository and pushes them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resurrection]]></title>
    <link href="http://sirkitree.github.com/content/resurrection"/>
    <updated>2009-11-12T00:00:00-07:00</updated>
    <id>http://sirkitree.github.com/content/resurrection</id>
    <content type="html"><![CDATA[<p>Finally took the old personal blog from d5 to d6 and gave it a face lift. The new Acquia Slate theme is pretty slick, but I wanted to give it just a small bit of uniqueness, so I wrote a little custom function into the theme in order to pull up random photos from one of my Flickr sets. It was fast and fun, made easy with the Flickr module's API. Here's a couple quick steps I took:</p>

<!--break-->


<ol>
<li>Edited the page-front.tpl.php and inserted a little logic to give the #preface-wrapper a different background-image property.
<pre>
<div id="preface-wrapper" class="clearfix" <?php if ($flickr): ?>style="background-image: url(<?php print $flickr; ?>);"<?php endif; ?>>
</pre></li>
<li>Wrote a custom function based off of the flickr_block.module's flickr_block_photoset_random() function. The function returns just the flickr farm url instead of running through the theme functions.
<pre>
function acquia_slate_flickr_block_photoset_random($nsid, $show_n, $size, $photoset_id) {
  // Get information about the photoset, including the owner.
  $info = flickr_photoset_get_info($photoset_id);
  if (!$info) {
    return;
  }

  // Get a list of "all" the photos in the photoset. This is cached.
  $response = flickr_request('flickr.photosets.getPhotos',
    array(
      'photoset_id' => $photoset_id,
      'per_page' => 500, // get as many images as possible
      'extras' => 'owner',
    )
  );
  if (!$response) {
    return;
  }

  // Randomly display $show_n of them
  $photos = $response['photoset']['photo'];
  shuffle($photos);

  $output = flickr_photo_img($photos[0], $size);

  return $output;
}
</pre></li>
<li>Set the result of this new function, called with hardcoded arguments, to a theme variable within template.php's phptemplate_preprocess_page() function.
<pre>
  // get a flickr image for the front page background
  $vars['flickr'] = acquia_slate_flickr_block_photoset_random($nsid, $show_n, $size, $photoset_id);
</pre>
</li>
</ol>


<p>The one thing I couldn't find was a block setting when looking at the flickr_block.module for the large size picture, which I needed.  But looking at how the url is created within flickr.inc's flickr_photo_img() function and comparing it with an actual large image on Flickr.com, I quickly saw that the size string is simply 'b_d' for large.</p>

<p>Fun stuff!</p>
]]></content>
  </entry>
  
</feed>
